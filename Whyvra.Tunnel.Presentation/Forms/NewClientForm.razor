@using System.Text
@using FluentValidation
@using Whyvra.Blazor.Forms.Renderers
@using Whyvra.Crypto.X25519

@inject ClientService ClientService
@inject IExceptionHandler ExceptionHandler
@inject IValidator<ClientViewModel> Validator
@inject NetworkAddressService NetworkAddressService
@inject QrCodeService QrCodeService
@inject TemplateService TemplateService

@if (_formModel != null)
{
    <Modal Icon="user-plus" IconCss="has-text-info" Title="New client" OnClose="HandleClose">
        <ChildContent>
            @if (_notification.IsVisible)
            {
                <Notification NotificationDto="@_notification" OnClose="@(() => _notification.IsVisible = false)"></Notification>
            }
            <BulmaForm @ref="_form" FormModel="@_formModel" FormState="_formState" GetValidationMessages="GetValidationMessages">
            </BulmaForm>
            @if (_isConfigGenerated)
            {
                <div class="has-text-centered">
                    <img src="@((MarkupString) _qrCode)" width="400" alt="WireGuard confiugration QR code">
                </diV>
            }
        </ChildContent>
        <Buttons>
            @if (!_isConfigGenerated)
            {
                <button class="button is-success @(_isLoading ? "is-loading" : "")" @onclick="GenerateConfig">
                    <span class="icon">
                        <i class="fas fa-file"></i>
                    </span>
                    <span>Generate config</span>
                </button>
            }
            else
            {
                <a class="button is-primary" download="@($"{_formModel.DataModel.Client.Name}.conf")" href="@((MarkupString) _configuration)">
                    <span class="icon">
                        <i class="fas fa-file-download"></i>
                    </span>
                    <span>Download config</span>
                </a>
            }
            <button class="button" @onclick="HandleClose">
                <span class="icon">
                    <i class="fas fa-times"></i>
                </span>
                <span>Close</span>
            </button>
        </Buttons>
    </Modal>
}

@code
{
    private string _configuration;
    private IFormRenderer _form;
    private FormState _formState;
    private FormModel<ClientViewModel> _formModel;
    private bool _isConfigGenerated;
    private bool _isLoading;
    private NotificationDto _notification = new NotificationDto();
    private string _qrCode;
    private bool _wasUpdated;

    [Parameter]
    public EventCallback<bool> CloseAction { get; set; }

    [Parameter]
    public ServerDto ServerDto { get; set; }

    protected override Task OnInitializedAsync()
    {
        var viewModel = new ClientViewModel
        {
            AllowedIps = ServerDto.DefaultAllowedRange
        };

        _formModel = new FormBuilder<ClientViewModel>()
            .Input(x => x.Client.Name).WithIcon("user")
            .TextArea(x => x.Client.Description)
            .Input(x => x.Client.AssignedIp).WithIcon("network-wired").WithText("Assigned IP")
            .Checkbox(x => x.Client.IsIpAutoGenerated).HideOnCheck(x => x.Name.Equals("AssignedIp")).WithText("Use next available IP address")
            .TagsInput(x => x.AllowedIps).WithEmptyValue("No IPs allowed").WithText("Allowed IPs")
            .WithModel(viewModel)
            .Build();

        ExceptionHandler.OnUnhandledException += HandleException;

        return Task.CompletedTask;
    }

    public IEnumerable<string> GetValidationMessages(string key)
    {
        var result = Validator.Validate(_formModel.DataModel);

        return result.Errors
            .Where(x => x.PropertyName.Equals(key))
            .Select(x => x.ErrorMessage);
    }

    private async Task GenerateConfig()
    {
        // Hide previous notification
        _notification.IsVisible = false;

        // Validate model
        var model = _formModel.DataModel;
        var result = Validator.Validate(model);

        if (!result.IsValid)
        {
            // Trigger form valiation
            _form.ValidateForm();
            HandleNotification("Please fill the required fields in the form below.", "danger");
            return;
        }

        // Set to loading
        _isLoading = true;
        _formState = FormState.ReadOnly;

        // Generate key
        var curve = new Curve25519();
        var privateKey = curve.CreateRandomPrivateKey();
        var publicKey = curve.GetPublicKey(privateKey);

        // Update client with public key
        var clientRequest = model.Client;
        clientRequest.PublicKey = Convert.ToBase64String(publicKey);

        // Create client
        var clientId = await ClientService.CreateNew(ServerDto.Id, model.Client);

        // Handle allowed IPs
        await NetworkAddressService.ProcessNetworkAddresses(ClientService, clientId, model.AllowedIps, Enumerable.Empty<string>());

        // Retrieve ClientDto
        var client = await ClientService.Get(clientId);
        
        // Update form
        model.Client.AssignedIp = client.AssignedIp;
        _formModel = new FormBuilder<ClientViewModel>()
            .Input(x => x.Client.Name).WithIcon("user")
            .TextArea(x => x.Client.Description, rows: 1)
            .Input(x => x.Client.AssignedIp).WithText("Assigned IP").WithIcon("network-wired")
            .TagsInput(x => x.AllowedIps).WithText("Allowed IPs").WithEmptyValue("No IPs allowed")
            .Input(x => x.Client.PublicKey).WithIcon("key")
            .WithModel(model)
            .Build();


        // Generate config
        var viewModel = new ClientConfigurationViewModel
        {
            Client = client,
            Server = ServerDto,
            PrivateKey = Convert.ToBase64String(privateKey)
        };
        var config = TemplateService.RenderClientConfiguration(viewModel);

        // Generate QR code
        var code = QrCodeService.RenderQrCode(config);

        _configuration = $"data:text/plain;base64, {Convert.ToBase64String(Encoding.UTF8.GetBytes(config))}";
        _qrCode = code;
        _isConfigGenerated = true;
        _wasUpdated = true;
        _isLoading = false;

        HandleNotification("Client added succesfully! Make sure to scan the QR code or " + 
            "download the configuration as this is the only time it will be available.", "success");
    }

    private async Task HandleClose()
    {
        await CloseAction.InvokeAsync(_wasUpdated);
    }

    private void HandleException(object sender, Exception e)
    {
        _isLoading = false;
        _formState = FormState.New;

        var message = e is TunnelException te ? te.FormattedMessage : e.Message;
        HandleNotification(message, "danger");
        StateHasChanged();
    }

    private void HandleNotification(string message, string severity)
    {
        if (severity.Equals("success"))
        {
            _notification = new NotificationDto
            {
                Icon = "check",
                IconCss = string.Empty,
                Message = message,
                Severity = severity
            };
        }
        else if (severity.Equals("danger"))
        {
            _notification = new NotificationDto
            {
                Icon = "exclamation-triangle",
                IconCss = "has-text-warning",
                Message = message,
                Severity = severity
            };
        }
        _notification.IsVisible = true;
    }
}