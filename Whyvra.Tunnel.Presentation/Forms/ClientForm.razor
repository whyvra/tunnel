@using System.Text.Json
@using FluentValidation
@using Whyvra.Blazor.Forms.Renderers

@implements IDisposable

@inject ClientService ClientService
@inject NetworkAddressService NetworkAddressService
@inject IExceptionHandler ExceptionHandler
@inject IValidator<UpdateClientViewModel> Validator

@if (_isLoading)
{
    <div class="modal is-active">
        <div class="modal-background"></div>
        <div class="modal-content modal-loader">
            <button class="button is-loading is-large"></button>
        </div>
    </div>
}
else if (_formModel != null)
{
    @if(_showDeleteConfirm)
    {
        <Modal Icon="trash-alt" IconCss="has-text-danger" ModalCss="z-index: 45;" OnClose="@(() => _showDeleteConfirm = false)" Title="Confirm deletion">
            <ChildContent>
                <p>
                    Are you sure you want to delete client @_formModel.DataModel.Client.Name ?
                </p>
            </ChildContent>
            <Buttons>
                <button class="button is-success" @onclick="Delete">
                    <span class="icon">
                        <i class="fas fa-check"></i>
                    </span>
                    <span>Yes</span>
                </button>
                <button class="button is-danger" @onclick="@(() => _showDeleteConfirm = false)">
                    <span class="icon">
                        <i class="fas fa-times"></i>
                    </span>
                    <span>No</span>
                </button>
            </Buttons>
        </Modal>
    }
    <Modal Icon="@(_isRevoked ? "user-slash" : "user")" Title="Client" IconCss="has-text-info"
        OnClose="HandleClose">
        <ChildContent>
            @if (_notification.IsVisible)
            {
                <Notification NotificationDto="@_notification" OnClose="@(() => _notification.IsVisible = false)"></Notification>
            }
            <BulmaForm @ref="_form" FormModel="_formModel" FormState="_formState" GetValidationMessages="GetValidationMessages">
            </BulmaForm>
        </ChildContent>
        <Buttons>
            @if (_formState == FormState.ReadOnly)
            {
                <button class="button is-warning" @onclick="@(() => _formState = FormState.Edit)">
                    <span class="icon">
                        <i class="fas fa-pencil-alt"></i>
                    </span>
                    <span>Edit</span>
                </button>
            }
            @if (_formState != FormState.ReadOnly)
            {
                <button class="button is-primary" @onclick="SaveChanges">
                    <span class="icon">
                        <i class="fas fa-save"></i>
                    </span>
                    <span>Save changes</span>
                </button>
            }
            @if (!_isRevoked)
            {
                <button class="button is-primary" disabled="@(_formState == FormState.Edit)" @onclick="Revoke">
                    <span class="icon">
                        <i class="fas fa-ban"></i>
                    </span>
                    <span>Revoke</span>
                </button>
            }
            else
            {
                <button class="button is-primary" disabled="@(_formState == FormState.Edit)" @onclick="Reinstate">
                    <span class="icon">
                        <i class="fas fa-gavel"></i>
                    </span>
                    <span>Reinstate</span>
                </button>
            }
            <button class="button is-danger" disabled="@(_formState == FormState.Edit)" @onclick="@(() => _showDeleteConfirm = true)">
                <span class="icon">
                    <i class="fas fa-trash-alt"></i>
                </span>
                <span>Delete</span>
            </button>
            <button class="button" @onclick="HandleClose">
                <span class="icon">
                    <i class="fas fa-times"></i>
                </span>
                <span>Close</span>
            </button>
        </Buttons>
    </Modal>
}

@code
{
    private string _copy;
    private IFormRenderer _form;
    private FormState _currentFormState = FormState.ReadOnly;
    private FormState _previousFormState = FormState.ReadOnly;
    private FormState _formState
    {
        get { return _currentFormState; }
        set
        {
            _previousFormState = _currentFormState;
            _currentFormState = value;
        }
    }
    private FormModel<UpdateClientViewModel> _formModel;
    private bool _isLoading;
    private bool _isRevoked;
    private NotificationDto _notification = new NotificationDto();
    private bool _showDeleteConfirm;

    [Parameter]
    public int ClientId { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ExceptionHandler.OnUnhandledException += HandleException;

        var client = await ClientService.Get(ClientId);
        _isRevoked = client.IsRevoked ?? false;

        if (_isRevoked)
        {
            _notification = new NotificationDto
            {
                Icon = "exclamation-triangle",
                IconCss = "has-text-warning",
                Message = "User has been revoked.",
                Severity = "danger"
            };
            _notification.IsVisible = true;
        }

        var viewModel = new UpdateClientViewModel
        {
            Client = new UpdateClientDto
            {
                Name = client.Name,
                Description = client.Description,
                AssignedIp = client.AssignedIp,
                IsRevoked = client.IsRevoked,
                PublicKey = client.PublicKey
            },
            AllowedIps = client.AllowedIps
        };
        _copy = JsonSerializer.Serialize(client);

        _formModel = new FormBuilder<UpdateClientViewModel>()
            .Input(x => x.Client.Name).WithIcon("user")
            .TextArea(x => x.Client.Description)
            .Input(x => x.Client.AssignedIp).WithIcon("network-wired").WithText("Assigned IP")
            .TagsInput(x => x.AllowedIps).WithText("Allowed IPs").WithEmptyValue("No IPs allowed")
            .Input(x => x.Client.PublicKey).WithIcon("key")
            .WithModel(viewModel)
            .Build();
    }

    public async Task Delete()
    {
        _isLoading = true;
        _showDeleteConfirm = false;

        await ClientService.Delete(ClientId);
        await OnClose.InvokeAsync(true);
    }

    public void Dispose()
    {
        ExceptionHandler.OnUnhandledException -= HandleException;
    }

    public IEnumerable<string> GetValidationMessages(string key)
    {
        var result = Validator.Validate(_formModel.DataModel);

        return result.Errors
            .Where(x => x.PropertyName.Equals(key))
            .Select(x => x.ErrorMessage);
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync(false);
    }

    private void HandleException(object sender, Exception e)
    {
        _formState = _previousFormState;
        _isLoading = false;
        _notification = new NotificationDto
        {
            Icon = "exclamation-triangle",
            IconCss = "has-text-warning",
            Message = e is TunnelException te ? te.FormattedMessage : e.Message,
            Severity = "danger"
        };
        _notification.IsVisible = true;
        StateHasChanged();
    }

    private async Task Reinstate()
    {
        _isLoading = true;

        var client = _formModel.DataModel.Client;
        client.IsRevoked = false;

        await ClientService.Update(ClientId, client);
        await OnClose.InvokeAsync(true);
    }

    private async Task Revoke()
    {
        _isLoading = true;

        var client = _formModel.DataModel.Client;
        client.IsRevoked = true;

        await ClientService.Update(ClientId, client);
        await OnClose.InvokeAsync(true);
    }

    private async Task SaveChanges()
    {
        // Validate model
        var model = _formModel.DataModel;
        var result = Validator.Validate(model);

        if (!result.IsValid)
        {
            // Show validation message
            _form.ValidateForm();
            _notification = new NotificationDto
            {
                Icon = "exclamation-triangle",
                IconCss = "has-text-warning",
                Message = "Please fill the required fields in the form below.",
                Severity = "danger"
            };
            _notification.IsVisible = true;
            return;
        }

        _formState = FormState.ReadOnly;
        _isLoading = true;
        var updated = false;

        // Dirty check
        var copy = JsonSerializer.Deserialize<ClientDto>(_copy);
        var isDirty = IsDirty(model.Client, copy);

        if (isDirty)
        {
            // Update
            await ClientService.Update(ClientId, model.Client);
            updated = true;
        }

        if(!model.AllowedIps.SequenceEqual(copy.AllowedIps))
        {
            await NetworkAddressService.ProcessNetworkAddresses(ClientService, ClientId, model.AllowedIps, copy.AllowedIps);
            updated = true;
        }

        await OnClose.InvokeAsync(updated);
    }

    private bool IsDirty(UpdateClientDto model,ClientDto copy)
    {
        return !(model.Name.Equals(copy.Name)
            && ((string.IsNullOrWhiteSpace(model.Description) && string.IsNullOrWhiteSpace(copy.Description)) || model.Description.Equals(copy.Description))
            && model.AssignedIp.Equals(copy.AssignedIp)
            && model.PublicKey.Equals(copy.PublicKey));
    }
}