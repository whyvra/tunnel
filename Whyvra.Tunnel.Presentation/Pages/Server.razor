@inject IJSRuntime js
@inject ServerService ServerService
@inject TemplateService TemplateService

@page "/servers/{ServerId:int}"

@if (_server != null)
{
    <article class="media">
        <figure class="media-left" style="padding-right: 15px;">
            <p class="is-size-1">
                <span class="icon">
                    <i class="fas fa-server"></i>
                </span>
            </p>
        </figure>
        <div class="media-content">
            <p class="title is-4">@_server.Name</p>
            <p class="subtitle is-6">@_server.Description</p>
        </div>
    </article>
    <div class="buttons" style="padding-top: 1.5em;">
        <button class="button is-primary" @onclick="ShowServerConfig">
            <span class="icon">
                <i class="fas fa-file"></i>
            </span>
            <span>Show server config</span>
        </button>
        @if (!_isRevokedShowing)
        {
            <button class="button is-danger" @onclick="GetRevoked">
                <span class="icon">
                    <i class="fas fa-ban"></i>
                </span>
                <span>Show revoked</span>
            </button>
        }
        else
        {
            <button class="button" @onclick="HideRevoked">
                <span class="icon">
                    <i class="fas fa-minus-circle"></i>
                </span>
                <span>Hide revoked</span>
            </button>
        }
        
    </div>
    <div class="level is-mobile" style="padding-top: 1.5em;">
        <div class="level-left">
            <p class="title is-4">Clients</p>
        </div>
        <div class="level-right">
            <button class="button is-success is-rounded" @onclick="@(() => _showPopup = true)">
                <span class="icon">
                    <i class="fas fa-user-plus"></i>
                </span>
                <span>New client</span>
            </button>
        </div>
    </div>

    <hr style="margin-top: 0;">

    <div class="tile is-ancestor" style="flex-wrap: wrap;">
    @foreach (var client in _server.Clients)
    {
        <div class="tile is-parent is-4 serverbox" @onclick="@(() => ShowClient(client.Id))">
            <article class="tile is-child box">
                <p class="title">@client.Name</p>
                <p class="subtitle">@client.Description</p>
            </article>
        </div>
    }
    @foreach (var client in _revoked)
    {
        <div class="tile is-parent is-4 serverbox" @onclick="@(() => ShowClient(client.Id))">
            <article class="tile is-child box notification is-danger">
                <p class="title">@client.Name</p>
                <p class="subtitle">@client.Description</p>
            </article>
        </div>
    }
    </div>

    @if (_isLoading)
    {
        <div class="modal is-active">
            <div class="modal-background"></div>
            <div class="modal-content modal-loader">
                <button class="button is-loading is-large"></button>
            </div>
        </div>
    }
    else if (_showPopup)
    {
        @if (_clientId.HasValue)
        {
            <ClientForm ClientId="@_clientId.Value" OnClose="ClosePopup"></ClientForm>
        }
        else
        {
            <NewClientForm CloseAction="ClosePopup" ServerDto="@_server"></NewClientForm>
        }
    }
    else if (_showServerConfig)
    {
        <Modal Icon="server" IconCss="has-text-info" Title="Server configuration" OnClose="@(() => _showServerConfig = false)">
            <ChildContent>
                @if (_notification.IsVisible)
                {
                    <Notification NotificationDto="@_notification" OnClose="@(() => _notification.IsVisible = false)"></Notification>
                }
                <pre class="codeblock">
                    <code class="language-ini">@_serverConfig</code>
                </pre>
            </ChildContent>
            <Buttons>
                <button class="button is-success" @onclick="CopyToClipboard">
                    <span class="icon">
                        <i class="fas fa-copy"></i>
                    </span>
                    <span>Copy to clipboard</span>
                </button>
                <button class="button" @onclick="@(() => _showServerConfig = false)">
                    <span class="icon">
                        <i class="fas fa-times"></i>
                    </span>
                    <span>Close</span>
                </button>
            </Buttons>
        </Modal>
    }
}
else if (_notFound)
{
    <div class="subtitle has-text-centered">
        <div>
            <span class="icon is-large">
                <i class="fas fa-times-circle fa-3x"></i>
            </span>
        </div>
        Looks like there is nothing here.
    </div>
}

@code
{
    private int? _clientId = null;
    private bool _isLoading;
    private bool _isRevokedShowing;
    private bool _notFound;
    private NotificationDto _notification = new NotificationDto();
    private string _serverConfig;
    private bool _showPopup;
    private bool _showServerConfig;
    private ServerDto _server;
    private IEnumerable<ClientDto> _revoked = Enumerable.Empty<ClientDto>();

    [Parameter]
    public int ServerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try {
            _server = await ServerService.Get(ServerId);
        }
        catch (TunnelException e)
        {
            if (e.ApiMessage.StatusCode == 404) _notFound = true;
            else throw e;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_showServerConfig)
        {
            await js.InvokeVoidAsync("HighlightService.trigger");
        }
    }

    private async Task ClosePopup(bool wasUpdated)
    {
        if (wasUpdated) 
        {
            _server = await ServerService.Get(ServerId);
            if (_isRevokedShowing)
            {
                _revoked = await ServerService.GetRevokedClients(ServerId);
            }
        }
        _showPopup = false;
        _clientId = null;
    }

    private async Task CopyToClipboard()
    {
        await js.InvokeVoidAsync("ClipboardService.copyText", _serverConfig);
        _notification = new NotificationDto
        {
            Icon = "paste",
            Message = "Copied to clipboard! Don't forget to swap the server's private key.",
            Severity = "info"
        };
        _notification.IsVisible = true;
    }
    
    private async Task GetRevoked()
    {
        _revoked = await ServerService.GetRevokedClients(ServerId);
        _isRevokedShowing = true;
    }

    private void HideRevoked()
    {
        _revoked = Enumerable.Empty<ClientDto>();
        _isRevokedShowing = false;
    }

    private void ShowClient(int id)
    {
        _clientId = id;
        _showPopup = true;
    }

    private async Task ShowServerConfig()
    {
        _isLoading = true;
        var clients = await ServerService.GetClients(ServerId);
        _serverConfig = TemplateService.RenderServerConfiguration(_server, clients);
        _showServerConfig = true;
        _isLoading = false;
    }
}