// <auto-generated />
using System;
using System.Net;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Whyvra.Tunnel.Data;

namespace Whyvra.Tunnel.Data.Postgres.Migrations
{
    [DbContext(typeof(TunnelContext))]
    [Migration("20201025214735_InitialConfig")]
    partial class InitialConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.ClientNetworkAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NetworkAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NetworkAddressId", "ClientId")
                        .IsUnique();

                    b.ToTable("ClientNetworkAddresses");
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int>("RecordId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.NetworkAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<ValueTuple<IPAddress, int>>("Address")
                        .HasColumnType("cidr");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("NetworkAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = new System.ValueTuple<System.Net.IPAddress, int>(System.Net.IPAddress.Parse("0.0.0.0"), 0),
                            CreatedAt = new DateTime(2020, 10, 25, 21, 47, 35, 59, DateTimeKind.Utc).AddTicks(7650),
                            UpdatedAt = new DateTime(2020, 10, 25, 21, 47, 35, 59, DateTimeKind.Utc).AddTicks(7650)
                        },
                        new
                        {
                            Id = 2,
                            Address = new System.ValueTuple<System.Net.IPAddress, int>(System.Net.IPAddress.Parse("::"), 0),
                            CreatedAt = new DateTime(2020, 10, 25, 21, 47, 35, 59, DateTimeKind.Utc).AddTicks(7650),
                            UpdatedAt = new DateTime(2020, 10, 25, 21, 47, 35, 59, DateTimeKind.Utc).AddTicks(7650)
                        });
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.ServerNetworkAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NetworkAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("NetworkAddressId", "ServerId")
                        .IsUnique();

                    b.ToTable("ServerNetworkAddresses");
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 21, 47, 35, 65, DateTimeKind.Utc).AddTicks(993),
                            Email = "system@example.com",
                            FirstName = "System",
                            LastName = "User",
                            Uid = new Guid("e3adf55b-7430-42c1-ae62-758d7b644fdb"),
                            UpdatedAt = new DateTime(2020, 10, 25, 21, 47, 35, 65, DateTimeKind.Utc).AddTicks(993),
                            Username = "system_user"
                        });
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.WireguardClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<ValueTuple<IPAddress, int>>("AssignedIp")
                        .HasColumnType("cidr");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsRevoked")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("character varying(44)")
                        .HasMaxLength(44);

                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedIp")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ServerId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.WireguardServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<ValueTuple<IPAddress, int>>("AssignedRange")
                        .HasColumnType("cidr");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<IPAddress>("Dns")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ListenPort")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("character varying(44)")
                        .HasMaxLength(44);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.ClientNetworkAddress", b =>
                {
                    b.HasOne("Whyvra.Tunnel.Domain.Entitites.WireguardClient", "Client")
                        .WithMany("AllowedIps")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whyvra.Tunnel.Domain.Entitites.NetworkAddress", "NetworkAddress")
                        .WithMany()
                        .HasForeignKey("NetworkAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.Event", b =>
                {
                    b.HasOne("Whyvra.Tunnel.Domain.Entitites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.ServerNetworkAddress", b =>
                {
                    b.HasOne("Whyvra.Tunnel.Domain.Entitites.NetworkAddress", "NetworkAddress")
                        .WithMany()
                        .HasForeignKey("NetworkAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whyvra.Tunnel.Domain.Entitites.WireguardServer", "Server")
                        .WithMany("DefaultAllowedRange")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Whyvra.Tunnel.Domain.Entitites.WireguardClient", b =>
                {
                    b.HasOne("Whyvra.Tunnel.Domain.Entitites.WireguardServer", "Server")
                        .WithMany("Clients")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
