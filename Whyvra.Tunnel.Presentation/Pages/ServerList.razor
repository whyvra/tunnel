@using Microsoft.Extensions.DependencyInjection

@inject IOptions<AuthenticationOptions> Auth
@inject IServiceProvider Services
@inject ServerService ServerService

@page "/servers"

<div style="padding-bottom: 1em; text-align: right;">
    <button class="button is-success is-rounded" @onclick="@(() => { _serverId = null; _showServerPopup = true; })">
        <span class="icon">
            <i class="fas fa-plus"></i>
        </span>
        <span>New server</span>
    </button>
</div>

@if (_servers != null && _servers.Count() == 0)
{
    <div class="subtitle has-text-centered" style="padding-top: 1.5em;">
        <div>
            <span class="icon is-large">
                <i class="fas fa-server fa-3x"></i>
            </span>
        </div>
        Looks like there are no servers yet. Click the 'New server' button to get started.
    </div>
}
else if (_servers != null)
{
    <div class="tile is-ancestor">
        @foreach (var server in _servers)
        {
            <div class="tile is-parent is-4 serverbox" @onclick="@(() => Pop(server.Id))">
                <article class="tile is-child box">
                    <p class="title">@server.Name</p>
                    <p class="subtitle">@server.Description</p>
                </article>
            </div>
        }
    </div>
}

    @if (_showServerPopup)
    {
        <ServerForm ServerId="@_serverId" CloseAction="ClosePopup" />
    }

@code
{
    private bool _showServerPopup = false;
    private IEnumerable<ServerDto> _servers = null;
    private int? _serverId = null;

    protected override async Task OnInitializedAsync()
    {
        // Check if authentication is enabled
        if (Auth.Value.Enabled)
        {
            var provider = Services.GetService<AuthenticationStateProvider>();
            var state = await provider.GetAuthenticationStateAsync();
            
            // Only query servers if authenticated
            if (state.User.Identity.IsAuthenticated)
            {
                _servers = await ServerService.GetAll();
            }
        }
        else
        {
            _servers = await ServerService.GetAll();
        }
    }

    private void Pop(int serverId)
    {
        // Set server id
        _serverId = serverId;

        // Show popup
        _showServerPopup = true;
    }

    private async Task ClosePopup(bool updated)
    {
        if (updated) _servers = await ServerService.GetAll();
        _showServerPopup = false;
    }
}