@using Whyvra.Blazor.Forms.Renderer
@using Whyvra.Tunnel.Common.Models
@using Whyvra.Tunnel.Presentation.Services

@inject ServerService ServerService

@if (_server != null)
{
    <div class="modal is-active">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <div class="modal-card-title">
                    <div class="level">
                        <div class="level-left">
                            <div class="level-item">
                                <span class="icon has-text-info" style="padding-right: 10px;">
                                    <i class="fas fa-info-circle"></i>
                                </span>
                                <span>Server info</span>
                            </div>
                        </div>
                    </div>
                </div>
                <button class="delete" aria-label="close" @onclick="DoCloseAction"></button>
            </header>
            <section class="modal-card-body">
                <BulmaForm FormModel="_formModel" FormViewMode="@_formMode"></BulmaForm>
            </section>
            <footer class="modal-card-foot">
                <button class="button is-warning">
                    <span class="icon">
                        <i class="fas fa-pencil-alt"></i>
                    </span>
                    <span>Edit</span>
                </button>
                <button class="button is-danger">
                    <span class="icon">
                        <i class="fas fa-trash-alt"></i>
                    </span>
                    <span>Delete</span>
                </button>
                <button class="button" @onclick="DoCloseAction">
                    <span class="icon">
                        <i class="fas fa-times"></i>
                    </span>
                    <span>Cancel</span>
                </button>
            </footer>
        </div>
    </div>
}

@code
{
    private FormViewMode _formMode = FormViewMode.Readonly;
    private FormModel<ServerDto> _formModel;
    private ServerDto _server;

    [Parameter]
    public int ServerId { get; set; }

    [Parameter]
    public EventCallback CloseAction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _server = await ServerService.Get(ServerId);

        var fb = new FormBuilder<ServerDto>();

        _formModel = fb
            .Input(x => x.Name).WithIcon("server")
            .TextArea(x => x.Description, rows: 3)
            .Input(x => x.AssignedRange).WithText("Assigned IP Range").WithIcon("network-wired")
            .TagsInput(x => x.DefaultAllowedRange).WithDefaultEmptyValue("No IP range has been assigned")
            .Input(x => x.Dns).WithText("DNS").WithIcon("address-book")
            .Input(x => x.Endpoint).WithIcon("globe")
            .Input(x => x.PublicKey).WithIcon("key")
            .WithModel(_server)
            .Build();
    }

    private async Task DoCloseAction()
    {
        await CloseAction.InvokeAsync(null);
    }
}