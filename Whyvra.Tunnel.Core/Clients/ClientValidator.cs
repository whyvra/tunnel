using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Whyvra.Tunnel.Data;
using Whyvra.Tunnel.Data.Configuration;

namespace Whyvra.Tunnel.Core.Clients
{
    public class ClientValidator
    {
        private readonly ITunnelContext _context;

        public ClientValidator(ITunnelContext context)
        {
            _context = context;
        }

        public async Task EnsureUniqueClientOnCreate(string name, string assignedIp, int serverId, bool isIpAutoGenerated, CancellationToken cancellationToken)
        {
            await EnsureClientIsUnique(name, assignedIp, serverId, cancellationToken, isIpAutoGenerated: isIpAutoGenerated);
        }

        public async Task EnsureUniqueClientOnUpdate(int cliendId, string name, string assignedIp, int serverId, CancellationToken cancellationToken)
        {
            await EnsureClientIsUnique(name, assignedIp, serverId, cancellationToken, cliendId);
        }

        private async Task EnsureClientIsUnique(string name, string assignedIp, int serverId, CancellationToken cancellationToken, int? clientId = null, bool isIpAutoGenerated = false)
        {
            // Create base query
            var query = _context.Clients
                .AsNoTracking();

            if (clientId == null && isIpAutoGenerated)
            {
                // IP will be auto-generated so only check for Name/ServerId collision
                query = query.Where(x => x.Name == name && x.ServerId == serverId);
            }
            else if (clientId == null && !isIpAutoGenerated)
            {
                // IP entered manually so check for Name/ServerId and AssignedIp/ServerId collisions
                var addr = assignedIp.ToAddress();
                query = query.Where(x => x.ServerId == serverId && (x.Name == name || Tuple.Equals(x.AssignedIp, addr)));
            }
            else {
                // Record being updated so check for Name/ServerId and AssignedIp/ServerId collisions where Id is not the ID of the current record
                var addr = assignedIp.ToAddress();
                query = query.Where(x => x.Id != clientId.Value && x.ServerId == serverId && (x.Name == name || Tuple.Equals(x.AssignedIp, addr)));
            }

            // Check if any client match
            var client = await query
                .Select(x => new {x.Name, x.AssignedIp})
                .FirstOrDefaultAsync(cancellationToken);

            // Throw the appropriate exception
            if (client != null && client.Name == name) throw new ArgumentException($"A client with name '{name}' already exists on this server.");
            if (client != null && $"{client.AssignedIp.addr}/{client.AssignedIp.cidr}" == assignedIp) throw new ArgumentException($"A client with assigned IP '{assignedIp}' already exists on this server.");
        }
    }
}