@inherits ComponentBase

@if (IsReadOnly)
{
    <div class="tags">
        @foreach (var tag in Data)
        {
            <span class="tag is-rounded is-primary">@tag</span>
        }
        @if (!Data.Any())
        {
            <span class="tag is-rounded is-primary">@EmptyValue</span>
        }
    </div>
}
else
{
    <div class="tags-input">
        @foreach (var tag in Data)
        {
            <span class="tag is-rounded is-primary">
                @tag
                <button class="delete" @onclick:preventDefault></button>
            </span>
        }
        <input class="input" type="text" placeholder="@Placeholder" value=@_value @oninput="Process">
    </div>
    
}

@code
{
    private string _value = null;

    [Parameter]
    public IEnumerable<string> Data { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<string>> DataChanged { get; set; }

    [Parameter]
    public string EmptyValue { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    private async Task Process(ChangeEventArgs e)
    {
        // Get typed text
        var text = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(text)) return;

        var lastChar = text[text.Length - 1];

        if (lastChar == ',')
        {
            // Add new tag to list
            var data = Data.ToList();
            data.Add(text.Substring(0, text.Length - 1));

            // Empty text field
            _value = string.Empty;

            // Update the public list and trigger callback
            Data = data;
            await DataChanged.InvokeAsync(Data);
        }
    }
}